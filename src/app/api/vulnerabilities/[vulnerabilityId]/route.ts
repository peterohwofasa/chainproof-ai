import { NextRequest, NextResponse } from 'next/server'
import { getServerSession } from 'next-auth'
import { authOptions } from '@/lib/auth'
import { db as prisma } from '@/lib/db'
import { z } from 'zod'
import { Severity } from '@prisma/client'

const updateVulnerabilitySchema = z.object({
  title: z.string().min(1).optional(),
  description: z.string().optional(),
  severity: z.nativeEnum(Severity).optional(),
  category: z.string().optional(),
  recommendation: z.string().optional(),
  lineNumber: z.number().int().positive().optional(),
  codeSnippet: z.string().optional(),
})

export async function GET(
  request: NextRequest,
  { params }: { params: { vulnerabilityId: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const vulnerability = await prisma.vulnerability.findUnique({
      where: {
        id: params.vulnerabilityId,
      },
      include: {
        audit: {
          include: {
            contract: {
              select: {
                id: true,
                name: true,
                address: true,
                sourceCode: true,
                project: {
                  select: {
                    id: true,
                    name: true,
                    userId: true,
                  },
                },
              },
            },
          },
        },
      },
    })

    if (!vulnerability) {
      return NextResponse.json(
        { error: 'Vulnerability not found' },
        { status: 404 }
      )
    }

    // Check if user has access to this vulnerability through the audit
    if (vulnerability.audit.userId !== session.user.id) {
      return NextResponse.json(
        { error: 'Access denied' },
        { status: 403 }
      )
    }

    return NextResponse.json(vulnerability)
  } catch (error) {
    console.error('Error fetching vulnerability:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function PUT(
  request: NextRequest,
  { params }: { params: { vulnerabilityId: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const body = await request.json()
    const validatedData = updateVulnerabilitySchema.parse(body)

    // Check if vulnerability exists and user has access
    const existingVulnerability = await prisma.vulnerability.findUnique({
      where: {
        id: params.vulnerabilityId,
      },
      include: {
        audit: {
          select: {
            userId: true,
          },
        },
      },
    })

    if (!existingVulnerability) {
      return NextResponse.json(
        { error: 'Vulnerability not found' },
        { status: 404 }
      )
    }

    if (existingVulnerability.audit.userId !== session.user.id) {
      return NextResponse.json(
        { error: 'Access denied' },
        { status: 403 }
      )
    }

    const vulnerability = await prisma.vulnerability.update({
      where: {
        id: params.vulnerabilityId,
      },
      data: validatedData,
      include: {
        audit: {
          select: {
            id: true,
            status: true,
            contract: {
              select: {
                id: true,
                name: true,
                address: true,
              },
            },
          },
        },
      },
    })

    return NextResponse.json(vulnerability)
  } catch (error) {
    if (error instanceof z.ZodError) {
      return NextResponse.json(
        { error: 'Validation error', details: error.errors },
        { status: 400 }
      )
    }

    console.error('Error updating vulnerability:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}

export async function DELETE(
  request: NextRequest,
  { params }: { params: { vulnerabilityId: string } }
) {
  try {
    const session = await getServerSession(authOptions)
    if (!session?.user?.id) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    // Check if vulnerability exists and user has access
    const existingVulnerability = await prisma.vulnerability.findUnique({
      where: {
        id: params.vulnerabilityId,
      },
      include: {
        audit: {
          select: {
            userId: true,
          },
        },
      },
    })

    if (!existingVulnerability) {
      return NextResponse.json(
        { error: 'Vulnerability not found' },
        { status: 404 }
      )
    }

    if (existingVulnerability.audit.userId !== session.user.id) {
      return NextResponse.json(
        { error: 'Access denied' },
        { status: 403 }
      )
    }

    await prisma.vulnerability.delete({
      where: {
        id: params.vulnerabilityId,
      },
    })

    return NextResponse.json({ message: 'Vulnerability deleted successfully' })
  } catch (error) {
    console.error('Error deleting vulnerability:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}