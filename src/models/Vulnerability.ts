import mongoose, { Schema, Document } from 'mongoose';

export enum Severity {
  CRITICAL = 'CRITICAL',
  HIGH = 'HIGH',
  MEDIUM = 'MEDIUM',
  LOW = 'LOW',
  INFO = 'INFO'
}

export interface IVulnerability extends Document {
  _id: string;
  auditId: string;
  title: string;
  description: string;
  severity: Severity;
  category: string; // e.g., "Reentrancy", "Access Control", etc.
  lineNumbers?: string; // JSON array of line numbers
  codeSnippet?: string;
  recommendation: string;
  cweId?: string; // Common Weakness Enumeration ID
  swcId?: string; // Smart Contract Weakness Classification ID
  createdAt: Date;
}

const VulnerabilitySchema = new Schema<IVulnerability>({
  auditId: { type: String, required: true },
  title: { type: String, required: true },
  description: { type: String, required: true },
  severity: { type: String, enum: Object.values(Severity), required: true },
  category: { type: String, required: true },
  lineNumbers: { type: String },
  codeSnippet: { type: String },
  recommendation: { type: String, required: true },
  cweId: { type: String },
  swcId: { type: String }
}, {
  timestamps: { createdAt: true, updatedAt: false },
  collection: 'vulnerabilities'
});

// Single column indexes
VulnerabilitySchema.index({ auditId: 1 });
VulnerabilitySchema.index({ severity: 1 });
VulnerabilitySchema.index({ category: 1 });
VulnerabilitySchema.index({ createdAt: 1 });
VulnerabilitySchema.index({ cweId: 1 });
VulnerabilitySchema.index({ swcId: 1 });

// Composite indexes for common query patterns
VulnerabilitySchema.index({ auditId: 1, severity: 1 });
VulnerabilitySchema.index({ severity: 1, category: 1 });
VulnerabilitySchema.index({ category: 1, createdAt: 1 });

export const Vulnerability = mongoose.models.Vulnerability || mongoose.model<IVulnerability>('Vulnerability', VulnerabilitySchema);