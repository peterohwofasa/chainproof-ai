{
  "sourceCode": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ncontract VulnerableContract {\n    mapping(address => uint256) public balances;\n    address public owner;\n    bool private locked;\n    \n    event Withdrawal(address indexed user, uint256 amount);\n    \n    constructor() {\n        owner = msg.sender;\n    }\n    \n    // Vulnerable function - missing access control\n    function setOwner(address newOwner) public {\n        owner = newOwner;\n    }\n    \n    // Vulnerable function - reentrancy attack possible\n    function withdraw(uint256 amount) public {\n        require(balances[msg.sender] >= amount, \"Insufficient balance\");\n        \n        // External call before state change - VULNERABLE TO REENTRANCY\n        (bool success, ) = msg.sender.call{value: amount}(\"\");\n        require(success, \"Transfer failed\");\n        \n        // State change after external call\n        balances[msg.sender] -= amount;\n        \n        emit Withdrawal(msg.sender, amount);\n    }\n    \n    // Vulnerable function - integer overflow (in older Solidity versions)\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n    \n    // Vulnerable function - gas limit DoS\n    function distributeRewards(address[] memory recipients) public {\n        require(msg.sender == owner, \"Only owner\");\n        \n        for (uint256 i = 0; i < recipients.length; i++) {\n            // Unbounded loop with external calls - GAS LIMIT DOS\n            (bool success, ) = recipients[i].call{value: 1 ether}(\"\");\n            require(success, \"Transfer failed\");\n        }\n    }\n    \n    // Vulnerable function - unchecked external call\n    function forwardFunds(address payable target, uint256 amount) public {\n        require(msg.sender == owner, \"Only owner\");\n        \n        // Unchecked external call - doesn't handle failure\n        target.call{value: amount}(\"\");\n    }\n}",
  "network": "ethereum",
  "contractAddress": "0x1234567890123456789012345678901234567890"
}